const s=location.pathname.split("/").slice(0,-1).join("/"),o=[s+"/_app/immutable/entry/app.DVTT16gd.js",s+"/_app/immutable/nodes/0.Cyt7pvWo.js",s+"/_app/immutable/assets/0.idNYPWEX.css",s+"/_app/immutable/nodes/1.Dw9XYdMw.js",s+"/_app/immutable/assets/1.Cz2UwI3h.css",s+"/_app/immutable/nodes/2.BvexslTi.js",s+"/_app/immutable/assets/2.Tr2rD_Gn.css",s+"/_app/immutable/nodes/3.oPtsTf5f.js",s+"/_app/immutable/assets/3.LKP8FjCh.css",s+"/_app/immutable/nodes/4.D2hlx2UA.js",s+"/_app/immutable/assets/4.BpKrkL3S.css",s+"/_app/immutable/nodes/5.BCNvubHX.js",s+"/_app/immutable/assets/5.BnIeKl3w.css",s+"/_app/immutable/nodes/6.DAoXSYyM.js",s+"/_app/immutable/assets/6.Vzq7q7Yn.css",s+"/_app/immutable/assets/ProgressBar.Cirlo5Z8.css",s+"/_app/immutable/chunks/ProgressBar.svelte_svelte_type_style_lang.D45o3ZTf.js",s+"/_app/immutable/chunks/each.Bt99gS3h.js",s+"/_app/immutable/chunks/entry.DW7OctHw.js",s+"/_app/immutable/chunks/globals.D0QH3NT1.js",s+"/_app/immutable/chunks/index.NEkLQFSy.js",s+"/_app/immutable/chunks/index.dMOHkvD3.js",s+"/_app/immutable/chunks/scheduler.BgK5Tl8W.js",s+"/_app/immutable/chunks/spread.CN4WR7uZ.js",s+"/_app/immutable/chunks/stay.C-BlIyKy.js",s+"/_app/immutable/chunks/stores.BSME2v04.js",s+"/_app/immutable/chunks/stores.Bx8X7Q0D.js",s+"/_app/immutable/chunks/transitions.DZ-Rh8KR.js",s+"/_app/immutable/entry/start.CiJtIn4j.js"],u=[s+"/favicon.png",s+"/icon.svg",s+"/manifest.json",s+"/maskable_icon_x128.png",s+"/maskable_icon_x192.png",s+"/maskable_icon_x384.png",s+"/maskable_icon_x48.png",s+"/maskable_icon_x512.png",s+"/maskable_icon_x72.png",s+"/maskable_icon_x96.png"],r="1713126103063",p=self,c=`cache-${r}`,l=[...o,...u];p.addEventListener("install",a=>{async function n(){await(await caches.open(c)).addAll(l)}a.waitUntil(n())});p.addEventListener("activate",a=>{async function n(){for(const t of await caches.keys())t!==c&&await caches.delete(t)}a.waitUntil(n())});p.addEventListener("fetch",a=>{if(a.request.method!=="GET")return;async function n(){const t=new URL(a.request.url),i=await caches.open(c);if(l.includes(t.pathname)){const e=await i.match(t.pathname);if(e)return e}try{const e=await fetch(a.request);if(!(e instanceof Response))throw new Error("invalid response from fetch");return e.status===200&&i.put(a.request,e.clone()),e}catch(e){const m=await i.match(a.request);if(m)return m;throw e}}a.respondWith(n())});
